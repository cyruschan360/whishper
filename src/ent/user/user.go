// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeTranscriptions holds the string denoting the transcriptions edge name in mutations.
	EdgeTranscriptions = "transcriptions"
	// Table holds the table name of the user in the database.
	Table = "users"
	// TranscriptionsTable is the table that holds the transcriptions relation/edge.
	TranscriptionsTable = "transcriptions"
	// TranscriptionsInverseTable is the table name for the Transcription entity.
	// It exists in this package in order to avoid circular dependency with the "transcription" package.
	TranscriptionsInverseTable = "transcriptions"
	// TranscriptionsColumn is the table column denoting the transcriptions relation/edge.
	TranscriptionsColumn = "user_transcriptions"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPassword,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/pluja/anysub/ent/runtime"
var (
	Hooks [1]ent.Hook
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByTranscriptionsCount orders the results by transcriptions count.
func ByTranscriptionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTranscriptionsStep(), opts...)
	}
}

// ByTranscriptions orders the results by transcriptions terms.
func ByTranscriptions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTranscriptionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTranscriptionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TranscriptionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TranscriptionsTable, TranscriptionsColumn),
	)
}
